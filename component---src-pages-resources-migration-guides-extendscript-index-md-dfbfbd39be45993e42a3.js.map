{"version":3,"file":"component---src-pages-resources-migration-guides-extendscript-index-md-dfbfbd39be45993e42a3.js","mappings":"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","sources":["webpack://uxp-indesign/./src/pages/resources/migration-guides/extendscript/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extendscript-to-uxp\"\n    }}>{`ExtendScript to UXP`}</h1>\n    <p>{`ExtendScript uses an older version of JavaScript (ES3). In contrast, UXP uses the V8 JavaScript engine which supports ES6; this has several notable features lacking in ExtendScript. `}</p>\n    <p>{`Not all the newer features of ES6 are used and/or supported in the UXP world, but as an ExtendScript developer, you should familiarize yourself with ECMAScript ES6 so you can understand the sample code.`}</p>\n    <p>{`This page goes over how ExtendScript can be rewritten in UXP script in simple steps.`}</p>\n    <p>{`For scripts,`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Save the file with `}<inlineCode parentName=\"li\">{`.idjs`}</inlineCode>{` extension.`}</li>\n      <li parentName=\"ol\">{`Update the script for unsupported methods`}</li>\n    </ol>\n    <table columnWidths=\"20,35,35,10\">\n    <thead>\n        <tr>\n            <th>Differences</th>\n            <th>ExtendScript</th>\n            <th>UXP</th>\n            <th>Applicable To</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><b>subscript operator [ ]</b> <br></br>\n                Collection objects returned by InDesign like documents and paragraphs will not support subscript operator [ ] to access element at a particular index. The alternative is to use the method by name item()Objects like app.selection which is of type Array will support subscript operator. \n            </td>\n            <td>\n            <code className=\"language-javascript\">{`\nfor (j = 0; j < app.selection[0].paragraphs.length; j++) {\n    var item = app.selection[0].paragraphs[j];\n}\n`}</code></td>\n            <td>\n            <code className=\"language-javascript\">{`\nfor (j = 0; j < app.selection[0].paragraphs.length; j++) {\n    var item = app.selection[0].paragraphs.item(j);\n}\n`}</code></td>\n            <td>All Versions</td>\n        </tr>\n        <tr>\n            <td><b>Object.constructor.name</b> <br></br>\n                <inlineCode>Object.constructor.name</inlineCode> which is a standard property in JS will return an empty string (\"\") for DOM objects. Alternatively, use the <inlineCode>object.constructorName</inlineCode> property.\n            </td>\n            <td>\n            <code className=\"language-javascript\">{`\nswitch(myPageItem.constructor.name) {\n    case \"Rectangle\":\n    case \"Oval\":\n        ...\n        break; \n}\n`}</code></td>\n            <td>\n            <code className=\"language-javascript\">{`\nswitch(myPageItem.constructorName) {\n    case \"Rectangle\":\n    case \"Oval\":\n        ...\n        break; \n}\n`}</code></td>\n            <td>Prior to v18.4</td>\n        </tr>\n        <tr>\n            <td><b>Comparison operators(== and ===)</b><br></br>\n                Comparison operators(== and ===) on InDesign DOM objects will always return false unless the objects have same reference. Instead use method equals()\n            </td>\n            <td>\n            <code className=\"language-javascript\">{`\nif (myPath.pathType == PathType.closedPath) { ... }\n`}</code></td>\n            <td>\n            <code className=\"language-javascript\">{`\nif (myPath.pathType.equals(PathType.closedPath)) { ... }\n`}</code></td>\n            <td> All Versions</td>\n        </tr>\n        <tr>\n            <td><b>instanceof</b> <br></br>\nThe <inlineCode>instanceof</inlineCode> keyword isn't supported for InDesign DOM objects. Instead using <inlineCode>object.constructorName</inlineCode> property.\n            </td>\n            <td>\n            <code className=\"language-javascript\">{`\nif (app.selection[0].paragraphs[0].appliedParagraphStyle.parent instanceof ParagraphStyleGroup) { ... }\n`}</code></td>\n            <td>\n            <code className=\"language-javascript\">{`\nif (app.selection[0].paragraphs.item(0).parent.constructorName == \"ParagraphStyleGroup\") { ... } \n`}</code></td>\n            <td> Prior to v18.4</td>\n        </tr>\n        <tr>\n            <td><b>Global object 'document'</b><br></br>\nGlobal object 'document' is not supported now. Instead, use <inlineCode>app.activeDocument</inlineCode>\n            </td>\n            <td>\n            <code className=\"language-javascript\">{`\ndocument.findText()\n`}</code></td>\n            <td>\n            <code className=\"language-javascript\">{`\napp.activeDocument.findText()\n`}</code></td>\n            <td> All Versions</td>\n        </tr>\n        <tr>\n            <td>ActiveScript <inlineCode>app.activeScript</inlineCode>\n            </td>\n            <td><inlineCode>app.activeScript</inlineCode> returns the current running script as a file object on which you can access other properties.\n            </td>\n            <td><inlineCode>app.activeScript</inlineCode> returns the path of the current script as a string. No other properties can be accessed on <inlineCode>app.activeScript</inlineCode>\n            </td>\n            <td>Prior to v18.4</td>\n        </tr>\n        <tr>\n            <td>Fetching the InDesign Server arguments passed to a script.\n            </td>\n            <td><inlineCode>var myArg = app.scriptArgs.getValue(\"*argumentName*\");</inlineCode>\n            </td>\n            <td><inlineCode>let arguments = script.args;</inlineCode> <a href=\"/indesign/uxp/scripts/tutorials/arguments/\">Learn More</a>\n            </td>\n            <td>v18.4 Onwards</td>\n        </tr>\n    </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","columnWidths","className","href","isMDXComponent"],"sourceRoot":""}