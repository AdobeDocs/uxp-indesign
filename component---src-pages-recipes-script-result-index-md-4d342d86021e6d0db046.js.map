{"version":3,"file":"component---src-pages-recipes-script-result-index-md-4d342d86021e6d0db046.js","mappings":"mRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,0BAE/BA,EAAAA,EAAAA,KAAA,sYAAgYA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,iEACvbH,EAAAA,EAAAA,KAAA,MACE,GAAM,SAAO,UAEfA,EAAAA,EAAAA,KAAA,+FAAyFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,MACnJH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,yCAG9BH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,gCAA8B,iCAEtCA,EAAAA,EAAAA,KAAA,mNACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,yKAO9BH,EAAAA,EAAAA,KAAA,qGACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,iDAE3BH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,0CAAwC,2CAEhDA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sBAAoC,6IACjEH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,oRAQ9BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,4KAO9BH,EAAAA,EAAAA,KAAA,wCAAkCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,qDAAqDH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yEACpKH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,2DAI/B,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-indesign/./src/pages/recipes/script-result/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"setting-script-result\"\n    }}>{`Setting Script Result`}</h1>\n    <p>{`InDesign now has the functionality to \"set result\" of a UXP script. After execution, a script can have its own result which then can be used for debugging purposes on InDesign Server. The result of the script can also be stored in a variable and be used by another script in both InDesign App and InDesign Server. Setting the script result can be accomplished using the script.`}<inlineCode parentName=\"p\">{`setResult()`}</inlineCode>{` API, the sections below demonstrate the various use cases. `}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following line sets the result of the UXP script being executed to the string `}<inlineCode parentName=\"p\">{`\"Hello World!\"`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`script.setResult(\"Hello World!\");\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"debugging-on-indesign-server\"\n    }}>{`Debugging on InDesign Server`}</h2>\n    <p>{`If we want to debug any variable, we can pass the variable name in the script.setResult() API. This will not only give the variable value but also the type. The following script demonstrates this. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let myInDesign = require(\"indesign\");\nlet app = myInDesign.app;\nconst script = require(\"uxp\").script;\nlet testVar = \"Hello World!\"\nscript.setResult(testVar);\n`}</code></pre>\n    <p>{`The result after executing this script on InDesign Server is shown on the client side. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Script result (std__string): Hello World!\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"using-another-variable-to-store-result\"\n    }}>{`Using another variable to store result`}</h2>\n    <p><inlineCode parentName=\"p\">{`script.setResult()`}</inlineCode>{` can be also be used to fetch result of one script, which in turn can be used in another script. The following scripts demonstrate this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//caller.idjs\nlet myInDesign = require(\"indesign\");\nlet app = myInDesign.app;\nconst script = require(\"uxp\").script;\nlet resultOfCalledScript = app.doScript(\"PATH_TO_CALLED.IDJS/called.idjs\", myInDesign.ScriptLanguage.UXPSCRIPT);\nconsole.log(resultOfCalledScript);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//called.idjs\nlet myInDesign = require(\"indesign\");\nlet app = myInDesign.app;\nconst script = require(\"uxp\").script;\nscript.setResult(\"Result of called script\");\n`}</code></pre>\n    <p>{`The result after executing `}<inlineCode parentName=\"p\">{`caller.idjs`}</inlineCode>{` on InDesign Server is shown on the client side. `}<strong parentName=\"p\">{`Note: The same functionality is also available on the InDesign App.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`Script result (std__string): Result of called script\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}