{"version":3,"file":"component---src-pages-guides-getting-started-basics-hello-world-index-md-9793e7a36403c26026c2.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBAAuB,0BAE/B,8FACA,+JACA,oBACE,eAAIC,WAAW,MAAI,2BACnB,eAAIA,WAAW,MAAI,4CACnB,eAAIA,WAAW,MAAI,8BACnB,eAAIA,WAAW,MAAI,yDAErB,qBAAK,iBAAMA,WAAW,OAAK,uzBAW3B,2LAGJ,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/basics/hello-world/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"your-first-uxp-script\"\n    }}>{`Your first UXP script`}</h1>\n    <p>{`In this guide, we will create our first hello-world UXP InDesign script`}</p>\n    <p>{`Our script will creates a new document, adds a text frame, and enters text in the text frame. This demonstrates how to do the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a new document.`}</li>\n      <li parentName=\"ul\">{`Create a text frame on a specific page.`}</li>\n      <li parentName=\"ul\">{`Add text to a text frame.`}</li>\n      <li parentName=\"ul\">{`Start a text editor and enter the following script:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`//HelloWorld.idjs\n//An InDesign UXPScript\n//\n//Creates a new document, adds a text frame,\n//resizes the text frame and adds text.\nvar myDocument = app.documents.add();\nvar myTextFrame = myDocument.pages.item(0).textFrames.add();\n/*Set the geometric bounds (the location of the top, left, bottom, and right edges) of the text frame. In this step, the script uses measurement overrides (\"p\" for picas) to ensure the text frame is the correct size, regardless of your default measurement units. The locations are provided as a list, or array, of values; each scripting language has a slightly different way of creating an array. */\n myTextFrame.geometricBounds = [\"6p\", \"6p\", \"24p\", \"24p\"];\n//Add text to the text frame by setting the proporty of the content to a string myTextFrame.contents = \"Hello World!\";\n`}</code></pre>\n    <p>{`Save the script as a plain-text file with the .idjs file extension to the Scripts Panel folder. To run the script, double-click the script name in the Scripts panel.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}