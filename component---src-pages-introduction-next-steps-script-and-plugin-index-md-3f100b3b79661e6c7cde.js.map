{"version":3,"file":"component---src-pages-introduction-next-steps-script-and-plugin-index-md-3f100b3b79661e6c7cde.js","mappings":"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","sources":["webpack://uxp-indesign/./src/pages/introduction/next-steps/script-and-plugin/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"uxp-scripts-and-plugins\"\n    }}>{`UXP Scripts and Plugins`}</h1>\n    <p>{`UXP offers two ways of extending the application's capabilities. You can choose between a script or a plugin. `}</p>\n    <p>{`A script is a single JavaScript file, with a special file extension based on the application you are developing it for. For example, in InDesign, these files have a `}<inlineCode parentName=\"p\">{`.idjs`}</inlineCode>{` file extension, and it is `}<inlineCode parentName=\"p\">{`.psjs`}</inlineCode>{` in Photoshop. On the other hand, a plugin can have multiple JS, HTML or CSS, almost like a web project, but most importantly a manifest that has the required configurations.`}</p>\n    <p>{`The following table will let you compare other differences. `}<br></br></p>\n    <table columnWidths=\"20,40,40\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>Scripts</th>\n            <th>Plugins</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><b>Compatibility</b></td>\n            <td>InDesign, and InDesign Server (since InDesign v18.0)</td>\n            <td>InDesign only (since InDesign v18.5)</td>\n        </tr>\n        <tr>\n            <td><b>Files</b></td>\n            <td>A single JavaScript file.</td>\n            <td>\n                Javascript <br></br>\n                + HTML and CSS (optional) <br></br>\n                + manifest.json</td>\n        </tr>\n        <tr>\n            <td><b>Manifest values</b></td>\n            <td>The application has predefined values for the manifest that cannot be altered</td>\n            <td>Requires you to specifically configure manifest.json and provides flexibility</td>\n        </tr>\n        <tr>\n            <td><b>Extensions</b></td>\n            <td>`.idjs`</td>\n            <td>`.ccx` for sharing, otherwise a regular folder can be used to load and test with the help of UDT.</td>\n        </tr>\n        <tr>\n            <td><b>User interface</b></td>\n            <td>You can ask users for input only via modal dialogs.</td>\n            <td>Along with modal dialogs, you can build elaborate UI within persistent panels</td>\n        </tr>\n        <tr>\n            <td><b>Distributable</b> <br></br>\n                <i>(Privately, own distribution channel or via Adobe Marketplace)</i> \n            </td>\n            <td> <br></br>\n                You can share your `.idjs` file with others who can include it in the scripts panel. <br></br>\n                However, scripts are <b>not</b> distributable via Adobe Marketplace.<br></br></td>\n            <td>\n                Once you create a packaged plugin with a `.ccx` extension, you can share it with others in multiple ways - privately, or via Adobe Marketplace or your own distribution channel.<br></br>\n                </td>\n        </tr>\n        <tr>\n            <td><b>Setup</b></td>\n            <td>Quickest and easiest to set up.</td>\n            <td>We offer multiple starter templates for you to get the setup up and running in no time. However, it requires some amount of understanding of the plugin `manifest`. <br></br>\n            Also, if you wish to use popular frameworks such as React, Vue etc, it is possible only within plugins and may require additional setup steps. </td>\n        </tr>\n        <tr>\n            <td><b>Miscellaneous</b></td>\n            <td>-</td>\n            <td>\n                You have three flavors within plugins - command, panel and hybrid plugins. <br></br>\n                A <b>command plugin</b>, also referred to as a modal plugin sometimes, is almost like a headless plugin that can occasionally ask for user inputs with the help of modal dialogs (like scripts). It is the best way to convert your existing script into a plugin to make it distributable. <br></br><br></br>\n                A <b>panel plugin</b> has a persistent UI. <br></br><br></br>\n                <b>Hybrid plugins</b>, which will be available in the future, can let you use the power of C++ libraries alongside JavaScript.</td>\n        </tr>\n    </tbody>\n    </table>\n    <br></br>\n    <p>{`Hope the above table helps you in deciding the best route suitable for your use case. Next, we recommend you write your first `}<a parentName=\"p\" {...{\n        \"href\": \"../../scripts/getting-started\"\n      }}>{`script`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"../../plugins/getting-started\"\n      }}>{`plugin`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","columnWidths","isMDXComponent"],"sourceRoot":""}