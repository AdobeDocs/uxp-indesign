{"version":3,"file":"component---src-pages-uxp-scripting-samples-index-md-ff5c96ab4b14c1c20542.js","mappings":"kRAMMA,EAAc,CAAC,EACfC,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,WAAS,YAEjB,yCAA0B,cAAGC,WAAW,IACpC,KAAQ,uFAAqF,kCACtD,MAC3C,eACE,GAAM,SAAO,UAEf,gHACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,keAuB9B,eACE,GAAM,UAAQ,WAEhB,gLACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,mhFA+ElC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/uxp-scripting-samples/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nconst layoutProps = {};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"samples\"\n    }}>{`Samples`}</h1>\n    <p>{`Check out the full `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/uxp-indesign/tree/main/src/pages/uxp-scripting-samples\"\n      }}>{`repo of scripting samples here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h2>\n    <p>{`This sample script demonstrates the execution of regular javascript using uxp scripting. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const getAppName = () => {\n    let appName;\n    try {\n        ps = require('photoshop').app;\n        appName = \"PHOTOSHOP\";\n    } catch (error) {\n        if (app) {\n            appName = \"InDesign\";\n        }\n    }\n    return appName;\n}\n\ntry{\n    const  text = \"Hello world!\";\n    let appName = getAppName();\n    \n    console.log(\"\\\\n\" + text + \"\\\\nWelcome to UXP Scripting...\" + (appName ? \"\\\\nin\\\\n\" + appName : \"\"));\n}catch(e){\n    console.log(e);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h2>\n    <p>{`The script below demonstrates how to create a dialog using an anonymous function, as well as setting up event listeners and resolving/rejecting promises.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function showDialog() {\n     \n    return new Promise((resolve, reject) => {\n        try{\n            let dialog = getDialog();\n            document.body.appendChild(dialog).showModal();\n            \n            const closeBtn = document.getElementById(\"close\");\n            closeBtn.addEventListener(\"click\", () => {\n                console.log(\"clicked on the close btton\");\n                dialog.close();\n            })\n \n            // add listeners on the dialog close and cancel and resolve/reject the promise returned in one of them.\n            // or you can have a button done in the dialog and can resolve the promise on the click of the button,\n            // but make sure that a promise is returned and that is resolved/rejected later else dialog wont show up.\n            dialog.addEventListener(\"cancel\", () => {\n                console.log(\"dialog cancel called\");\n                reject(\"dialog cancel called\");\n            });\n \n            dialog.addEventListener(\"close\", () => {\n                console.log(\"dialog Close called\");\n                resolve(\"dialog Close called\");\n            });\n        } catch (e) {\n            console.log(e);\n            reject(e);\n        }\n    })\n}\n\n// wait for the dialog to be closed\nawait showDialog();\n\n// Dialog creation and setting CSS styles for elements using anonymous method\nfunction getDialog() {\n    const dialog = document.createElement(\"dialog\");\n    // dialog.style.height = \"200px\";\n    // dialog.style.width = \"600px\";\n  \n    dialog.style.color = \"white\";\n  \n    const div = document.createElement(\"div\");\n    div.style.display = \"flex\";\n    div.style.flexDirection = \"column\";\n    div.style.height = \"300px\";\n    div.style.width = \"400px\";\n    div.style.alignItems = \"center\";\n  \n    const header = document.createElement(\"h2\");\n    header.id = \"head\";\n    header.style.color = \"white\";\n    header.textContent = \"Dialog Created by a script.\";\n    div.appendChild(header);\n\n\n    const image = document.createElement(\"img\");\n    image.src = \"https://1000logos.net/wp-content/uploads/2021/04/Adobe-logo.png\";\n    image.style.marginTop = \"30px\";\n    div.appendChild(image);\n\n    const cloaseButton = document.createElement(\"sp-button\");\n    cloaseButton.id = \"close\";\n    cloaseButton.style.height = \"30px\";\n    cloaseButton.textContent = \"Close\";\n    cloaseButton.style.marginTop = \"10px\";\n    div.appendChild(cloaseButton);\n      \n  \n    dialog.appendChild(div);\n    return dialog;\n}\n\n\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}