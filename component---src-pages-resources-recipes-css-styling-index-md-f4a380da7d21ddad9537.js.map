{"version":3,"file":"component---src-pages-resources-recipes-css-styling-index-md-f4a380da7d21ddad9537.js","mappings":"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","sources":["webpack://uxp-indesign/./src/pages/resources/recipes/css-styling/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"css-styling\"\n    }}>{`CSS styling`}</h1>\n    <p>{`Spectrum is Adobe's design system, used across multiple applications. We recommend that you use Spectrum-based controls wherever possible for UI, for consistency. In fact, UXP offers a ready-made Spectrum-styled UI library. `}</p>\n    <p>{`While you are exploring importing a stylesheet or making tweaks, you should keep in mind that `}<strong parentName=\"p\">{`UXP is not a browser`}</strong>{`. Its architecture does not (and will not) support all the CSS properties. For example, UXP cannot support grid layout innately. The ones that are supported are listed in the `}<a parentName=\"p\" {...{\n        \"href\": \"./#reference-material\"\n      }}>{`API reference docs`}</a>{`. `}</p>\n    <InlineAlert variant=\"info\" slots=\"header, text1, text2\" mdxType=\"InlineAlert\" />\n    <p>{`Scripts and plugins`}</p>\n    <p><strong parentName=\"p\">{`In scripts`}</strong>{`, since you don't have an HTML file as such, you will have to rely on adding styling via JavaScript to your UI components.`}</p>\n    <p><strong parentName=\"p\">{`In plugins`}</strong>{`, you have a lot more flexibility to manage CSS styling. You can add it via CSS classes or use inline styling or add it via JavaScript.`}</p>\n    <h2 {...{\n      \"id\": \"system-requirements\"\n    }}>{`System requirements`}</h2>\n    <p>{`Please make sure your local environment uses the following application versions before proceeding.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`InDesign v18.5 or higher`}</li>\n      <li parentName=\"ul\">{`UDT v1.9.0 or higher`}</li>\n      <li parentName=\"ul\">{`Manifest version v5 or higher`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Example to add a background color to divs in three different ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`CSS class`}</li>\n      <li parentName=\"ul\">{`Inline style`}</li>\n      <li parentName=\"ul\">{`Via JavaScript`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"HTML, JavaScript, CSS\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"html\"\n    }}>{`HTML`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"green\">\n  <h1>Styling from CSS class</h1>\n</div>\n\n<div style=\"background-color: yellow;\">\n  <h1>Inline styling</h1>\n</div>\n\n<div id=\"exampleDiv\">\n  <h1>Styling from JS</h1>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const exampleDiv = document.getElementById(\"exampleDiv\");\nexampleDiv.style.backgroundColor = 'orange';\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.green {\n  background-color: green;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-notes\"\n    }}>{`Additional notes`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`CSS preprocessors`}</strong>{`: UXP understands pure CSS only. Using CSS preprocessors such as SASS or SCSS is possible, provided you transpile your code to a CSS stylesheet before using it. Additionally, you will require a tool like Webpack to create your plugin bundle correctly and a slightly different way to `}<a parentName=\"li\" {...{\n          \"href\": \"../../../plugins/tutorials/udt-deep-dive/working-with-react/\"\n        }}>{`debug using UDT`}</a>{` (similar to React framework setup).`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"reference-material\"\n    }}>{`Reference material`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-indesign/indesign/uxp/reference/uxp-api/reference-css/\"\n        }}>{`CSS reference`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/uxp-indesign/indesign/uxp/reference/uxp-api/reference-spectrum/\"\n        }}>{`Spectrum-styled components`}</a>{` `}\n        {/* [Sample]() // TODO link to kitchen sink plugin */}\n        {/* [Webpack template]() // TODO link to webpack template */}\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}