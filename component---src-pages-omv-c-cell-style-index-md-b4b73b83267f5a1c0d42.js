"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[77773],{78939:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return u}});var r=a(87462),o=a(63366),n=(a(15007),a(64983)),m=a(91515),p=["components"],l={},d={_frontmatter:l},i=m.Z;function u(e){var t=e.components,a=(0,o.Z)(e,p);return(0,n.mdx)(i,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"cellstyle"},"CellStyle"),(0,n.mdx)("p",null,"A cell style."),(0,n.mdx)("h2",{id:"instance"},"Instance"),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Number ",(0,n.mdx)("strong",{parentName:"p"},"id")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The unique ID of the CellStyle."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Boolean ",(0,n.mdx)("strong",{parentName:"p"},"isValid")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Returns true if the object specifier resolves to valid objects."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"parent")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The parent of the CellStyle (a Document, Application or CellStyleGroup)."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Number ",(0,n.mdx)("strong",{parentName:"p"},"index")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The index of the CellStyle within its containing object."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"Events ",(0,n.mdx)("strong",{parentName:"p"},"events")," "),(0,n.mdx)("p",{parentName:"blockquote"},"A collection of events."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("em",{parentName:"p"},"Read Only")," "),(0,n.mdx)("p",{parentName:"blockquote"},"EventListeners ",(0,n.mdx)("strong",{parentName:"p"},"eventListeners")," "),(0,n.mdx)("p",{parentName:"blockquote"},"A collection of event listeners."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"graphicLeftInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The left inset of the graphic cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"graphicTopInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The top inset of the graphic cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"graphicRightInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The right inset of the graphic cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"graphicBottomInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The bottom inset of the graphic cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"clipContentToGraphicCell")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, clips the graphic cell's content to width and height of the cell. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"textTopInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The top inset of the text cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"textLeftInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The left inset of the text cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"textBottomInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The bottom inset of the text cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"textRightInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The right inset of the text cell. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"clipContentToTextCell")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, clips the text cell's content to width and height of the cell. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"basedOn")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The style that this style is based on. Can return: CellStyle or String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"appliedParagraphStyle")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The paragraph style applied to the text. Can return: ParagraphStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"gradientFillLength")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"gradientFillAngle")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180). Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"gradientFillStart")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The starting point (in page coordinates) of a gradient applied to the fill of the CellStyle, in the format ","[x, y]",". Can return: Array of 2 Units or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightInset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"fillColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object. Can return: Swatch or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"fillTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the fill of the object. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"overprintFill")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the fill of the object will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topLeftDiagonalLine")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, draws a diagonal line starting from the top left. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topRightDiagonalLine")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, draws a diagonal line starting from the top right. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineInFront")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, draws the diagonal line in front of cell contents. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeWeight")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The diagonal line stroke weight. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeType")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke type of the diagonal line(s). Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The diagonal line color, specified as a swatch. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The diagonal line tint (as a percentage). (Range: 0 to 100). Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the diagonal line stroke will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeGapColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeGapTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"diagonalLineStrokeGapOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"clipContentToCell")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"firstBaselineOffset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The distance between the baseline of the text and the top inset of the cell. Can return: FirstBaseline enumerator or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"verticalJustification")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The vertical alignment of cell. Can return: VerticalJustification enumerator or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"paragraphSpacingLimit")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"minimumFirstBaselineOffset")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The space between the baseline of the text and the top inset of the frame or cell. Can return: Unit (0 - 8640 points) or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rotationAngle")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeWeight")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke weight of the left edge border stroke. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeType")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke type of the left edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the left edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeGapColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeGapTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"leftEdgeStrokeGapOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeWeight")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke weight of the top edge border stroke. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeType")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke type of the top edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the top edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeGapColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeGapTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"topEdgeStrokeGapOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid. . Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeWeight")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke weight of the right edge border stroke. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeType")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke type of the right edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The color, specified as a swatch, of the right edge border stroke. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the right edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeGapColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeGapTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"rightEdgeStrokeGapOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeWeight")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke weight of the bottom edge border stroke. Can return: Unit or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeType")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The stroke type of the bottom edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the bottom edge border stroke. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the bottom edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeGapColor")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid. Can return: Swatch or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeGapTint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid. Can return: Real or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Mixed ",(0,n.mdx)("strong",{parentName:"p"},"bottomEdgeStrokeGapOverprint")," "),(0,n.mdx)("p",{parentName:"blockquote"},"If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid. Can return: Boolean or NothingEnum enumerator."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"String ",(0,n.mdx)("strong",{parentName:"p"},"name")," "),(0,n.mdx)("p",{parentName:"blockquote"},"The name of the style."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"String ",(0,n.mdx)("strong",{parentName:"p"},"label")," "),(0,n.mdx)("p",{parentName:"blockquote"},"A property that can be set to any string."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"Object ",(0,n.mdx)("strong",{parentName:"p"},"properties")," "),(0,n.mdx)("p",{parentName:"blockquote"},"A property that allows setting of several properties at the same time.")),(0,n.mdx)("h3",{id:"methods"},"Methods"),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("strong",{parentName:"p"},"remove"),"( CellStyle ",(0,n.mdx)("strong",{parentName:"p"},"replacingWith")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Deletes the style."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"CellStyle"),(0,n.mdx)("td",{parentName:"tr",align:null},"replacingWith"),(0,n.mdx)("td",{parentName:"tr",align:null},"The style to apply in place of the deleted style. (Optional)"))))),(0,n.mdx)("hr",null),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},"CellStyle ",(0,n.mdx)("strong",{parentName:"p"},"duplicate"),"()"),(0,n.mdx)("p",{parentName:"blockquote"},"Duplicates the CellStyle."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"CellStyle ",(0,n.mdx)("strong",{parentName:"p"},"move"),"( LocationOptions ",(0,n.mdx)("strong",{parentName:"p"},"to"),", Mixed ",(0,n.mdx)("strong",{parentName:"p"},"reference")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Moves the style to the specified location."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters-1"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"LocationOptions"),(0,n.mdx)("td",{parentName:"tr",align:null},"to"),(0,n.mdx)("td",{parentName:"tr",align:null},"The location relative to the reference object or within the containing object.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"Mixed"),(0,n.mdx)("td",{parentName:"tr",align:null},"reference"),(0,n.mdx)("td",{parentName:"tr",align:null},"The reference object. Note: Required when the to parameter specifies before or after. Can accept: ParagraphStyle, ParagraphStyleGroup, CharacterStyle, CharacterStyleGroup, CellStyle, CellStyleGroup, TableStyle, TableStyleGroup, Document or Application. (Optional)"))))),(0,n.mdx)("hr",null),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},(0,n.mdx)("strong",{parentName:"p"},"insertLabel"),"( String ",(0,n.mdx)("strong",{parentName:"p"},"key"),", String ",(0,n.mdx)("strong",{parentName:"p"},"value")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Sets the label to the value associated with the specified key."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters-2"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"String"),(0,n.mdx)("td",{parentName:"tr",align:null},"key"),(0,n.mdx)("td",{parentName:"tr",align:null},"The key.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"String"),(0,n.mdx)("td",{parentName:"tr",align:null},"value"),(0,n.mdx)("td",{parentName:"tr",align:null},"The value."))))),(0,n.mdx)("hr",null),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},"String ",(0,n.mdx)("strong",{parentName:"p"},"extractLabel"),"( String ",(0,n.mdx)("strong",{parentName:"p"},"key")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Gets the label value associated with the specified key."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters-3"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"String"),(0,n.mdx)("td",{parentName:"tr",align:null},"key"),(0,n.mdx)("td",{parentName:"tr",align:null},"The key."))))),(0,n.mdx)("hr",null),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},"String ",(0,n.mdx)("strong",{parentName:"p"},"toSource"),"()"),(0,n.mdx)("p",{parentName:"blockquote"},"Generates a string which, if executed, will return the CellStyle."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"CellStyle ",(0,n.mdx)("strong",{parentName:"p"},"getElements"),"()"),(0,n.mdx)("p",{parentName:"blockquote"},"Resolves the object specifier, creating an array of object references."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"String ",(0,n.mdx)("strong",{parentName:"p"},"toSpecifier"),"()"),(0,n.mdx)("p",{parentName:"blockquote"},"Retrieves the object specifier."),(0,n.mdx)("hr",{parentName:"blockquote"}),(0,n.mdx)("p",{parentName:"blockquote"},"EventListener ",(0,n.mdx)("strong",{parentName:"p"},"addEventListener"),"( String ",(0,n.mdx)("strong",{parentName:"p"},"eventType"),", Mixed ",(0,n.mdx)("strong",{parentName:"p"},"handler"),", Boolean ",(0,n.mdx)("strong",{parentName:"p"},"captures")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Adds an event listener."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters-4"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"String"),(0,n.mdx)("td",{parentName:"tr",align:null},"eventType"),(0,n.mdx)("td",{parentName:"tr",align:null},"The event type.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"Mixed"),(0,n.mdx)("td",{parentName:"tr",align:null},"handler"),(0,n.mdx)("td",{parentName:"tr",align:null},"The event handler. Can accept: File or JavaScript Function.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"Boolean"),(0,n.mdx)("td",{parentName:"tr",align:null},"captures"),(0,n.mdx)("td",{parentName:"tr",align:null},"This parameter is obsolete. (Optional)"))))),(0,n.mdx)("hr",null),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},"Boolean ",(0,n.mdx)("strong",{parentName:"p"},"removeEventListener"),"( String ",(0,n.mdx)("strong",{parentName:"p"},"eventType"),", Mixed ",(0,n.mdx)("strong",{parentName:"p"},"handler"),", Boolean ",(0,n.mdx)("strong",{parentName:"p"},"captures")," )"),(0,n.mdx)("p",{parentName:"blockquote"},"Removes the event listener."),(0,n.mdx)("h4",{parentName:"blockquote",id:"parameters-5"},"Parameters"),(0,n.mdx)("table",{parentName:"blockquote"},(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Type"),(0,n.mdx)("th",{parentName:"tr",align:null},"Name"),(0,n.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"String"),(0,n.mdx)("td",{parentName:"tr",align:null},"eventType"),(0,n.mdx)("td",{parentName:"tr",align:null},"The registered event type.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"Mixed"),(0,n.mdx)("td",{parentName:"tr",align:null},"handler"),(0,n.mdx)("td",{parentName:"tr",align:null},"The registered event handler. Can accept: File or JavaScript Function.")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"Boolean"),(0,n.mdx)("td",{parentName:"tr",align:null},"captures"),(0,n.mdx)("td",{parentName:"tr",align:null},"This parameter is obsolete. (Optional)"))))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-omv-c-cell-style-index-md-b4b73b83267f5a1c0d42.js.map