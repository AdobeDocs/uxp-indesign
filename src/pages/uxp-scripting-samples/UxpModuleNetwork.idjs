/* Below script gets user details making a network call and displays them in a dialog, 
*creates a new doc and a text Frame with specified size
*/

let myInDesign = require("indesign");
let dialogResolve = null;
let dialogReject = null;
 
// below method makes a GET request and fetches the user details(id, name etc)
async function getUserDetails() {
      
    return new Promise((resolve, reject) => {
        try{
           const xhr = new XMLHttpRequest();
  
            // GET request to a dummy URL
            xhr.open("GET", "https://reqres.in/api/users/2", true);
            xhr.onload = function(response){
                console.log(xhr.response);
    
                // Parsing the JSON response
                let res = JSON.parse(xhr.response);
    
    
    
                // Creating dialog and sending parsed result (user details) as arguments
                let dialog = createDialog(res.data.id,res.data.first_name + " " + res.data.last_name,res.data.email,res.data.avatar);
                dialogResolve = resolve;
                dialogReject = reject;
                document.body.appendChild(dialog).showModal();
            };
            xhr.onerror = function(error) {
                dialog.close();
                reject(error);
            };
            xhr.send();
  
             
 
        } catch (e) {
            console.log("Error from catch: " + e);
            resolve(e);
        }
    }) 
}
  
// below method accepts user details as arguments and creates a dialog
// it sets values and CSS properties for dialog elements and show that as a modal dialog
function createDialog(user_id,user_name,user_email,image_source) {
    const dialog = document.createElement("dialog");
    dialog.style.color = "white";
    dialog.style.margin = "20px";
   
    // Parent div to contain all the elements
    const div = document.createElement("div");
    div.style.display = "block";
    div.style.height = "300px";
    div.style.width = "400px";
   
    const headerDiv = document.createElement("div");
    const header = document.createElement("h2");
    header.id = "head";
    header.style.color = "white";
    header.textContent = "User Profile Details";
    headerDiv.appendChild(header);
    // headerDiv.style.margin = "5px";
    div.appendChild(headerDiv);
  
    const identity = document.createElement("p");
    identity.textContent = "Id: "+user_id;
    div.appendChild(identity);
  
    const username = document.createElement("p");
    username.textContent = "Name: "+user_name;
    div.appendChild(username);
       
    const email = document.createElement("p");
    email.textContent = "Email: "+user_email;
    div.appendChild(email)
   
    const image = document.createElement("img");
    image.id = "img";
    image.style.width = "100px";
    image.style.height = "100px";
    image.style.margin = "10px";
    image.style.border = "1px solid black";
    image.src = image_source;
    div.appendChild(image);
  
    const cloaseButton = document.createElement("sp-button");
    cloaseButton.id = "close";
    cloaseButton.textContent = "Close";
    div.appendChild(cloaseButton);

    cloaseButton.addEventListener("click", () => {
        console.log("clicked on the close btton");
        dialog.close();
    })

    // add listeners on the dialog close and cancel and resolve/reject the promise returned in one of them.
    // or you can have a button done in the dialog and can resolve the promise on the click of the button,
    // but make sure that a promise is returned and that is resolved/rejected later else dialog wont show up.
    cloaseButton.addEventListener("cancel", () => {
        console.log("dialog cancel called");
        dialogReject("dialog cancel called");
    });

    cloaseButton.addEventListener("close", () => {
        console.log("dialog Close called");
        dialogResolve("dialog Close called");
    });
  
  
  
    // Adding div to dialog and dialog to body. Showing as a modal dialog.
    dialog.appendChild(div);
    return dialog;
}
 
await getUserDetails();
