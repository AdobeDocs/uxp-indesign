{"version":3,"file":"component---src-pages-scripts-concepts-global-await-index-md-83999e1661850ed18804.js","mappings":"oRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,gBAAc,iBAEtBA,EAAAA,EAAAA,KAAA,6FACAA,EAAAA,EAAAA,KAAA,yMACAA,EAAAA,EAAAA,KAAA,qPACAA,EAAAA,EAAAA,KAAA,gGAA0FA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,OAAqB,6GAA6GH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,wGAC5SH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,+MAY9BH,EAAAA,EAAAA,KAAA,iEACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,8DAI3BH,EAAAA,EAAAA,KAAA,qEACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,4CAG3BH,EAAAA,EAAAA,KAAA,qDAA+CA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,6HAErGH,EAAAA,EAAAA,KAAA,yDAAmDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,QAAc,yGAAyGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,SAASH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,iDAAiDH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpW,KAAQ,0CAAwC,WAChC,8BACpBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,4UAgB9BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,qFAI3BH,EAAAA,EAAAA,KAAA,kDACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0BAA2BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,gBAA8B,uHACvGH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,gGAAiGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,iFACtKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,qGACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,WAAyB,kIAI9E,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-indesign/./src/pages/scripts/concepts/global-await/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"global-await\"\n    }}>{`Global await`}</h1>\n    <p>{`Global await is the way to handle asynchronous operations inside a UXP Script. `}</p>\n    <p>{`First, let's understand asynchronous behavior. Asynchronous tasks are non-blocking in nature, which means it doesnâ€™t block further execution while one or more operations are in progress. `}</p>\n    <p>{`For example, texting or emailing a friend. Once you send a message, you can continue to do other tasks. You don't necessarily have to wait for a response but it's assured that you will be informed/notified when you receive a reply.`}</p>\n    <p>{`Now, let's look at some code with asynchronous behavior. In the following example, `}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{` returns a value after a brief delay of 2s. The delay in the example below is simulated with the help of `}<inlineCode parentName=\"p\">{`settimeout`}</inlineCode>{` but in the real world, it could be because of anything, such as a network call to fetch some data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"Start of execution.\");\n\nfunction delayedFoo(text) {\n    setTimeout(() => {\n      console.log(\"Greetings: Hello\",\n    }, 2000);\n}\ndelayedFoo();\n\nconsole.log(\"End of execution.\");\n`}</code></pre>\n    <p>{`You might expect the output of the above code to be`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Start of execution\nGreetings: Hello\nEnd of execution\n`}</code></pre>\n    <p>{`However, the actual output would be something like this`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Start of execution\nEnd of execution\n`}</code></pre>\n    <p>{`What happened to the console.log inside `}<inlineCode parentName=\"p\">{`settimeout`}</inlineCode>{`? Why is it not visible? It is because\nyour script was no longer alive. UXP scripts expect your code to be synchronous.`}</p>\n    <p>{`To make it work, we need to make the thread `}<em parentName=\"p\">{`wait`}</em>{` for the async task to finish before continuing with the next statement. We can attain this by using `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{`. (Familiarize yourself with the concepts of `}<a parentName=\"p\" {...{\n        \"href\": \"https://javascript.info/promise-basics\"\n      }}>{`promise`}</a>{` if you are not already) `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"Start of execution.\");\n\nasync function delayedFoo() {\n    let prom = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(\"Greetings: Hello\");\n            resolve();\n        }, 2000);\n    });\n    return prom;\n}\nawait delayedFoo();\n\nconsole.log(\"End of execution.\");\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Start of execution\nGreetings: Hello // after a delay of 2s\nEnd of execution\n`}</code></pre>\n    <p>{`Let's go over the changes in detail:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The await in front of `}<inlineCode parentName=\"li\">{`delayedFoo()`}</inlineCode>{` is referred to as global await. It keeps the UXP Script waiting for an async task to complete at a global scope. `}</li>\n      <li parentName=\"ul\">{`You are allowed to have as many global awaits as you would like, but keep in mind that each `}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` halts the execution, waiting for the async task to finish before moving on.`}</li>\n      <li parentName=\"ul\">{`Returning a promise from the async function lets you resolve the value at a later point in time.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolve`}</inlineCode>{`-ing a promise is important once the asynchronous task is complete. So that the script can continue to execute the next line.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}