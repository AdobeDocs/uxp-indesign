"use strict";(self.webpackChunkuxp_indesign=self.webpackChunkuxp_indesign||[]).push([[6492],{77699:function(e,n,s){s.r(n),s.d(n,{_frontmatter:function(){return o},default:function(){return g}});var r=s(87462),t=s(45987),a=(s(15007),s(64983)),i=s(91515);const p=["components"],o={},l=(m="InlineAlert",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",e)});var m;const d={_frontmatter:o},c=i.Z;function g(e){let{components:n}=e,s=(0,t.Z)(e,p);return(0,a.mdx)(c,(0,r.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"passing-arguments"},"Passing Arguments"),(0,a.mdx)("p",null,"Since InDesign v18.4 arguments/parameters can be passed to UXP scripts. "),(0,a.mdx)("p",null,"You can use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"script.args")," API to access the arguments passed to the script as an array."),(0,a.mdx)("h2",{id:"usage"},"Usage"),(0,a.mdx)("p",null,"Use the following to fetch the arguments passed to the script as an array:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'const script = require("uxp").script;\nlet argsArray = script.args\n')),(0,a.mdx)(l,{variant:"info",slots:"text1",mdxType:"InlineAlert"}),"Arguments cannot be passed from the InDesign application directly. We can pass arguments to a script directly using InDesign Server only.",(0,a.mdx)("h2",{id:"passing-arguments-to-indesign-server"},"Passing Arguments to InDesign Server"),(0,a.mdx)("p",null,"You can pass arguments to InDesign Server through the ",(0,a.mdx)("inlineCode",{parentName:"p"},"sampleclient"),". "),(0,a.mdx)("p",null,"Specify all the necessary information, such as the port number, script name, and arguments. Pass the arguments as a string where the ",(0,a.mdx)("inlineCode",{parentName:"p"},"=")," sign separates the key and the value. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"script.args")," API returns an array of strings where the elements are the key/value pairs of arguments specified while executing the script. Here’s an example:"),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Command to Pass Arguments to IDS Scripts")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'../../../../mac/debug_cocoa64/sampleclient -host localhost:12345 testArgs.idjs "arg1=100" "arg2=200"\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'const script = require("uxp").script;\nlet ar = script.args;\nscript.setResult(ar);\n')),(0,a.mdx)("p",null,"The result after executing this script on InDesign Server is shown on the client side. "),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Script result (LIST, 2):\n    (std__string): arg1=100\n    (std__string): arg2=200\n")),(0,a.mdx)("h2",{id:"passing-arguments-to-indesign-server-indesign-app-via-doscript"},"Passing Arguments to InDesign Server/ InDesign App Via doScript()"),(0,a.mdx)("p",null,"Passing arguments to another UXP script is possible with the help of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"doScript")," API. "),(0,a.mdx)("p",null,"You can pass a variable of type array as the third parameter of the doScript API call. Unlike on InDesign Server, ",(0,a.mdx)("inlineCode",{parentName:"p"},"script.args")," fetches the values of the arguments passed to the external script. Here’s an example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'//caller.idjs\nconst myInDesign = require("indesign");\nconst app = myInDesign.app;\nconst argsArray = [100,200];\napp.doScript("PATH_TO_CALLED/called.idjs", myInDesign.ScriptLanguage.UXPSCRIPT, argsArray);\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'//called.idjs\nconst script = require("uxp").script;\nconsoel.log(script.args);\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"[console] 100,200\n")))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-scripts-tutorials-arguments-index-md-a740e743048a0665694c.js.map