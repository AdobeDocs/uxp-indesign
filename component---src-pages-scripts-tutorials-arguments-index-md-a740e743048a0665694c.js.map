{"version":3,"file":"component---src-pages-scripts-tutorials-arguments-index-md-a740e743048a0665694c.js","mappings":"oRAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,qBAAmB,sBAE3BA,EAAAA,EAAAA,KAAA,sFACAA,EAAAA,EAAAA,KAAA,6BAAuBA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,eAA6B,mEAC9EX,EAAAA,EAAAA,KAAA,MACE,GAAM,SAAO,UAEfA,EAAAA,EAAAA,KAAA,wFACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,0EAI9BX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,QAAQ,OAAOC,MAAM,QAAQH,QAAQ,gBAAgB,6IAElEV,EAAAA,EAAAA,KAAA,MACE,GAAM,wCAAsC,yCAE9CA,EAAAA,EAAAA,KAAA,mEAA6DA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,gBAA8B,OACrHX,EAAAA,EAAAA,KAAA,kJAA4IA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,KAAmB,+CAA+CX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,eAA6B,sJAC/RX,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAG,8CACzBX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,OAAK,4GAE3BX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,2FAK9BX,EAAAA,EAAAA,KAAA,qGACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,OAAK,0FAI3BX,EAAAA,EAAAA,KAAA,MACE,GAAM,kEAAgE,sEAExEA,EAAAA,EAAAA,KAAA,sFAAgFA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,YAA0B,WACpIX,EAAAA,EAAAA,KAAA,+HAAyHA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,eAA6B,2FAChLX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,sNAO9BX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,uFAK9BX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,OAAK,wBAI/B,CAEAP,EAAWU,gBAAiB,C","sources":["webpack://uxp-indesign/./src/pages/scripts/tutorials/arguments/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"passing-arguments\"\n    }}>{`Passing Arguments`}</h1>\n    <p>{`Since InDesign v18.4 arguments/parameters can be passed to UXP scripts. `}</p>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`script.args`}</inlineCode>{` API to access the arguments passed to the script as an array.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Use the following to fetch the arguments passed to the script as an array:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const script = require(\"uxp\").script;\nlet argsArray = script.args\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text1\" mdxType=\"InlineAlert\" />\nArguments cannot be passed from the InDesign application directly. We can pass arguments to a script directly using InDesign Server only. \n    <h2 {...{\n      \"id\": \"passing-arguments-to-indesign-server\"\n    }}>{`Passing Arguments to InDesign Server`}</h2>\n    <p>{`You can pass arguments to InDesign Server through the `}<inlineCode parentName=\"p\">{`sampleclient`}</inlineCode>{`. `}</p>\n    <p>{`Specify all the necessary information, such as the port number, script name, and arguments. Pass the arguments as a string where the `}<inlineCode parentName=\"p\">{`=`}</inlineCode>{` sign separates the key and the value. The `}<inlineCode parentName=\"p\">{`script.args`}</inlineCode>{` API returns an array of strings where the elements are the key/value pairs of arguments specified while executing the script. Here’s an example:`}</p>\n    <p><strong parentName=\"p\">{`Command to Pass Arguments to IDS Scripts`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`../../../../mac/debug_cocoa64/sampleclient -host localhost:12345 testArgs.idjs \"arg1=100\" \"arg2=200\"\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const script = require(\"uxp\").script;\nlet ar = script.args;\nscript.setResult(ar);\n`}</code></pre>\n    <p>{`The result after executing this script on InDesign Server is shown on the client side. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Script result (LIST, 2):\n    (std__string): arg1=100\n    (std__string): arg2=200\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"passing-arguments-to-indesign-server-indesign-app-via-doscript\"\n    }}>{`Passing Arguments to InDesign Server/ InDesign App Via doScript()`}</h2>\n    <p>{`Passing arguments to another UXP script is possible with the help of the `}<inlineCode parentName=\"p\">{`doScript`}</inlineCode>{` API. `}</p>\n    <p>{`You can pass a variable of type array as the third parameter of the doScript API call. Unlike on InDesign Server, `}<inlineCode parentName=\"p\">{`script.args`}</inlineCode>{` fetches the values of the arguments passed to the external script. Here’s an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//caller.idjs\nconst myInDesign = require(\"indesign\");\nconst app = myInDesign.app;\nconst argsArray = [100,200];\napp.doScript(\"PATH_TO_CALLED/called.idjs\", myInDesign.ScriptLanguage.UXPSCRIPT, argsArray);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//called.idjs\nconst script = require(\"uxp\").script;\nconsoel.log(script.args);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`[console] 100,200\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}