{"version":3,"file":"component---src-pages-scripts-tutorials-script-result-index-md-204d85e197e39986f337.js","mappings":"oRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,0BAE/BA,EAAAA,EAAAA,KAAA,0EACAA,EAAAA,EAAAA,KAAA,4JAAsJA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sBAAoC,yBACpNH,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,+FAAyFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,MACnJH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,gGAK9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,6BAA2B,8BAEnCA,EAAAA,EAAAA,KAAA,kGACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,oPAO9BH,EAAAA,EAAAA,KAAA,gFAA0EA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,oVAC+CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,2GAC1OH,EAAAA,EAAAA,KAAA,qGACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,gDAI/B,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://uxp-indesign/./src/pages/scripts/tutorials/script-result/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"setting-script-result\"\n    }}>{`Setting Script Result`}</h1>\n    <p>{`Since InDesign v18.4, you can \"set result\" of a UXP script. `}</p>\n    <p>{`After execution, a script can return a result, which could be used for evaluating the outcome of script execution. The result can be set using `}<inlineCode parentName=\"p\">{`script.setResult()`}</inlineCode>{` API as shown below.`}</p>\n    <h2 {...{\n      \"id\": \"setting-the-result\"\n    }}>{`Setting the result`}</h2>\n    <p>{`The following line sets the result of the UXP script being executed to the string `}<inlineCode parentName=\"p\">{`\"Hello World!\"`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// called.idjs\nconst script = require(\"uxp\").script;\nscript.setResult(\"Hello World!\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-the-script-result\"\n    }}>{`Reading the script result`}</h2>\n    <p>{`The below code snippets demonstrate how to read the script result of another script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// caller.idjs\nconst myInDesign = require(\"indesign\");\nconst app = myInDesign.app;\nconst resultOfCalledScript = app.doScript(\"PATH_TO_CALLED.IDJS/called.idjs\", myInDesign.ScriptLanguage.UXPSCRIPT);\nconsole.log(resultOfCalledScript);\n`}</code></pre>\n    <p>{`Scripts can return a result by setting the appropriate value using `}<inlineCode parentName=\"p\">{`setResult()`}</inlineCode>{` API. This result is returned to the entity that invoked this script. If this script was executed from InDesign's scripts panel, then the result is ignored.\nHowever, for scripts executed in InDesign Server, the result value is returned to the client that requested the script execution. If the script is forked by another script using `}<inlineCode parentName=\"p\">{`app.doScript()`}</inlineCode>{` API the result value set by 'called' script is returned to the 'caller' script, as illustrated above.`}</p>\n    <p>{`The result after executing this script on InDesign Server is shown on the client side.Â `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Script result (std__string): Hello World!\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}