{"version":3,"file":"component---src-pages-scripts-concepts-script-lifespan-index-md-74aad108a65edb46f153.js","mappings":"oRAMaA,EAAe,CAAC,EACvBC,EAAgBC,GAAQ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,EACMI,EAAYN,EAAc,aAC1BO,EAAcP,EAAc,eAC5BQ,EAAc,CAClBT,gBAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIV,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,mBAAiB,oBAEzBA,EAAAA,EAAAA,KAAA,2IACAA,EAAAA,EAAAA,KAAA,+DACAA,EAAAA,EAAAA,KAACC,EAAS,CAACY,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBH,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,gBAEpBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMgB,WAAW,MAClB,UAAa,eAAa,uJAW9BhB,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMgB,WAAW,OAAK,8DAI3BhB,EAAAA,EAAAA,KAAA,uQAAiQA,EAAAA,EAAAA,KAAA,KAAGgB,WAAW,IAC3Q,KAAQ,6DAA2D,mBAC3C,gDAC5BhB,EAAAA,EAAAA,KAACE,EAAW,CAACe,QAAQ,OAAOJ,MAAM,sBAAsBD,QAAQ,iBAChEZ,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQgB,WAAW,KAAG,aACzBhB,EAAAA,EAAAA,KAAA,iHAA2GA,EAAAA,EAAAA,KAAA,cAAYgB,WAAW,KAAG,gBAA8B,8EACnKhB,EAAAA,EAAAA,KAAA,oIACAA,EAAAA,EAAAA,KAAA,6HACAA,EAAAA,EAAAA,KAAA,2UAAqUA,EAAAA,EAAAA,KAAA,KAAGgB,WAAW,IAC/U,KAAQ,gFAA8E,cACnE,MACvBhB,EAAAA,EAAAA,KAAA,+PACAA,EAAAA,EAAAA,KAAA,oQAA8PA,EAAAA,EAAAA,KAAA,cAAYgB,WAAW,KAAG,gBAA8B,mHAG1T,CAEAV,EAAWY,gBAAiB,C","sources":["webpack://uxp-indesign/./src/pages/scripts/concepts/script-lifespan/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-indesign/uxp-indesign/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"script-lifespan\"\n    }}>{`Script lifespan`}</h1>\n    <p>{`UXP scripts, like JavaScript, are single-threaded and non-blocking. It lives until the last statement in the execution stack.`}</p>\n    <p>{`Let's understand this with a very simple example.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, Text\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sampleidjs\"\n    }}>{`sample.idjs`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"Start of execution.\");\n\nfunction foo() {\n    console.log(\"Greetings: Hello\");\n}\n\nfoo();\n\nconsole.log(\"End of execution.\");\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"output\"\n    }}>{`Output`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`Start of execution\nGreetings: Hello\nEnd of execution\n`}</code></pre>\n    <p>{`In the above code, the script is considered to be complete or done once it executes the last line. It is no longer alive after the last line - \"End of execution\". This is the standard way in which how JavaScript execution stack work. Learn about the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.javascripttutorial.net/javascript-call-stack/\"\n      }}>{`execution stack`}</a>{`, if you are not already familiar with it. `}</p>\n    <InlineAlert variant=\"info\" slots=\"text1, text2, text3\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Pro tip`}</strong></p>\n    <p>{`While debugging your scripts, adding a breakpoint to the last statement will help in seeing all the `}<inlineCode parentName=\"p\">{`console.logs`}</inlineCode>{` before they disappear when the script completes and debug window closes.`}</p>\n    <p>{`It's also worth noting that a script session too coincides with its lifespan. Every execution is a different session. `}</p>\n    <p>{`The above example also showcases pure synchronous operations. Such operations are always executed sequentially.`}</p>\n    <p>{`However, things are a little complicated when we speak about asynchronous tasks. An async task usually happens at a later point in time and the execution thread doesn't wait around for it to complete. (If you are not familiar with synchronous/asynchronous operations in JavaScript, here's an article that explains the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.freecodecamp.org/news/synchronous-vs-asynchronous-in-javascript/\"\n      }}>{`difference`}</a>{`)`}</p>\n    <p>{`Since UXP scripts only live until it reaches the last statement in the call stack, they may no longer be alive, for the asynchronous tasks to execute at a later point in time. Almost as if it expects your code to be synchronous at all times.`}</p>\n    <p>{`We understand that in real-world use cases, this is not possible. A network call is asynchronous and it may take a few seconds for it to resolve. And the script should wait for such operations somehow. So how do we handle such scenarios? By using `}<inlineCode parentName=\"p\">{`global await`}</inlineCode>{`, which makes asynchronous code behave like synchronous operations. We will learn about it in the next section.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","repeat","languages","parentName","variant","isMDXComponent"],"sourceRoot":""}